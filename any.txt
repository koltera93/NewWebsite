Задание на экзамен
Используется сайт-блог, который делали на как домашнюю работу.
Для этого блога нужно сделать возможность комментировать посты.
Для каждого комментария хранить следующую информацию:
дату и время добавления комментария
никнейм автора
текст комментария (без html-форматирования)
В сущности комментария должна быть связь ManyToOne с постом.

Страница поста
На странице поста, под текстом нужно добавить вывод комментариев к посту в порядке убывания даты их добавления.
Для каждого комментария выводить дату и время комментария, никнейм автора и текст.
Предусмотреть корректное отображение переносов строк.
Под всеми комментариями нужно добавить форму добавления комментария из 3х полей (упомянуты выше) и кнопкой Добавить.
При нажатии кнопки страница должна перезагрузиться с добавленным комментарием.

Главная страница
Перед ссылкой Читать далее добавить вывод количества комментариев.
Справка ManyToOne-ассоциаций
     /**
     * @ORM\ManyToOne(targetEntity="Category", inversedBy="products")
     * @ORM\JoinColumn(blog="category_id")
     */
    private $category;

В другой сущности:

   /**
     * @ORM\OneToMany(targetEntity="Product", mappedBy="category")
     * @ORM\OrderBy({"blog" = "ASC"})
     */
    private $products;

    public function __construct()
    {
        $this->products = new ArrayCollection();
    }

Завершенную работу разместить на github и прислать ссылку на gleb.sinkovskiy@gmail.com







{% block title %}MyBlog!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
    body {background-color: #5eb5e0 }
</style>

<div class="example-wrapper">

    <table>
    {% for blogs in blog %}
        <td><a href="{{ path('blogs_show', {'id': blogs.id}) }}"><h2>{{ blogs.blog }}<br></h2></a></td>
        <td>{{ blogs.text }}</td>
    {% endfor %}
    </table>

</div>
{% endblock
findBy([],['createdAt' => 'DESC'], 3)





    <div class="example-wrapper">
        {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}

        {{ form(blog.name)}}

        {{ form(blog.text) }}

        <div class="form-group row">
            <div class="col-sm-10 offset-sm-2">
                <button type="submit" class="btn btn-primary">Добавить комментарий</button>
            </div>
        </div>

        {{ form_end(form) }}
    </div>





    <div class="example-wrapper">
        <hr>
        <a href="{{ path('homepage') }}"><< Main page</a>
        <hr>
        <h3>Изменить {{ blog.date|date("d.m.Y h:m:s A") }}</h3>

        {{ form, {'attr': {'novalidate':'novalidate'}} }}

        {{ form(blog.name)}}

        {{ form(blog.text) }}

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Сохранить</button>
        </div>
        {{ form_end(form) }}
    </div>





        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager->persist($blog);
            $entityManager->flush();

            return $this->redirectToRoute('blogs_show',['id' => $blog->getId()]);
        }